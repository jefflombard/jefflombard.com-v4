{"version":3,"sources":["components/Menu.js","components/Quote.js","scenes/Books.js","scenes/Home.js","scenes/Projects.js","scenes/Writing.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","react_default","a","createElement","className","__source","fileName","_jsxFileName","lineNumber","items","map","item","key","path","Link","to","label","build","xs","Quote","Quote_jsxFileName","text","Books","Books_jsxFileName","components_Quote","react_apollo_browser_umd","query","gql","_templateObject","_ref","loading","error","data","console","log","books","_ref2","content","id","interweave_lib","Home","Home_jsxFileName","Projects","Projects_templateObject","Projects_jsxFileName","projects","concat","Writing","Writing_templateObject","Writing_jsxFileName","posts","client","ApolloClient","uri","App","App_jsxFileName","BrowserRouter","sm","components_Menu","Route","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83a7b8e5.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Hidden } from 'react-grid-system';\n\nconst Menu = props => (\n  <div className=\"nav-menu\">\n    <div>\n      {\n        props.items.map( item => (\n        <li key={item.path}>\n          <Link to={item.path}>{item.label}</Link>\n        </li>\n        ))\n      }\n    </div>\n    <Hidden xs>\n      <div className=\"line\"/>\n      <div className=\"text-section\">\n        <p>\n          <span className=\"bold\">jeff lombard</span>\n        </p>\n        <p>jefflombardjr(at)</p>\n        <p>gmail(dot)com</p>\n      </div>\n      <div className=\"text-section\">\n        <p>\n          <span className=\"bold\">location</span>\n        </p>\n        <p>philadelphia, pa</p>\n      </div>\n    </Hidden>\n  </div>\n);\n\nexport default Menu;\n","import React from 'react';\n\nconst Quote = props => (\n  <div className=\"quote\">\n    <p className=\"quote-text\">{props.text}</p>\n  </div>\n);\n\nexport default Quote;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport { Markup } from 'interweave';\nimport gql from \"graphql-tag\";\n\nimport Quote from '../components/Quote';\n\nconst Books = props => (\n    <div className=\"books\">\n        <Quote text=\"I love to read. Send me your recommendations!\"/>\n        <Query\n            query={gql`\n              {\n                books{\n                  id\n                  content\n                }\n              }\n            `}\n          >\n            {({ loading, error, data }) => {\n              if (loading) return <p>Loading...</p>;\n              if (error) return <p>Error :</p>;\n              console.log('Hey, if you\\'re reading this... validateDOMNesting() Error is Caused by the markup coming from the Good Reads API. Not my code :)');\n              return data.books.map(({ content, id }) => (<div key={id}><Markup content={content} /></div>));\n            }}\n        </Query>\n    </div>\n);\n\nexport default Books;\n","import React from 'react';\n\nconst Home = props => (\n  <div className=\"home\">\n    <h1 className=\"home-header\">Jeff Lombard</h1>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst Projects = props => (\n  <Query\n    query={gql`\n      {\n        projects{\n          id\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n\n      return data.projects.map(({ id }) => (\n        <div key={id}>\n          <p>{`id: ${id}`}</p>\n        </div>\n      ));\n    }}\n  </Query>\n);\n\nexport default Projects;","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst Writing = props => (\n  <Query\n    query={gql`\n      {\n        posts{\n          id\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n\n      return data.posts.map(({ id }) => (\n        <div key={id}>\n          <p>{`id: ${id}`}</p>\n        </div>\n      ));\n    }}\n  </Query>\n);\n\nexport default Writing;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\n// Component Imports\nimport Menu from './components/Menu';\nimport { Row, Col } from 'react-grid-system';\n\n// Scene Imports\nimport { Books, Home, Projects, Writing } from './scenes';\n\n// Setup GraphQL\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nclass App extends Component {\n  render() {\n    const menuItems = [\n      { path: \"/\", label: \"home\" },\n      { path: \"/projects/\", label: \"projects\" },\n      { path: \"/books\", label: \"books\"},\n      { path: \"/writing\", label: \"writing\"},\n    ];\n\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"main\">\n            <Row>\n              <Col sm={3}>\n                <Menu items={menuItems} />\n              </Col>\n              <Col sm={9}>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/projects/\" component={Projects} />\n                <Route path=\"/books\" component={Books} />\n                <Route path=\"/writing\" component={Writing} />\n              </Col>\n            </Row>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}